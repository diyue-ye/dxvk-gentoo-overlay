diff --git a/meson.build b/meson.build
index 4746a40..7b32158 100644
--- a/meson.build
+++ b/meson.build
@@ -4,6 +4,13 @@ cpu_family = target_machine.cpu_family()
 
 add_project_arguments('-DNOMINMAX', language : 'cpp')
 
+if get_option('whole_program')
+  add_project_arguments('-fwhole-program', language : 'cpp')
+  add_project_arguments('-fvisibility=hidden', language : 'cpp')
+  add_project_arguments('-U__declspec_dllexport', language : 'cpp')
+  add_project_arguments('-D__declspec_dllexport=__attribute__((externally_visible))', language : 'cpp')
+endif
+
 dxvk_compiler = meson.get_compiler('cpp')
 if dxvk_compiler.get_id() == 'msvc'
   dxvk_cpp_std='c++latest'
@@ -29,6 +36,7 @@ if meson.get_cross_property('winelib', false)
   lib_vulkan  = declare_dependency(link_args: [ '-lwinevulkan' ])
   lib_d3d11   = declare_dependency(link_args: [ '-ld3d11' ])
   lib_dxgi    = declare_dependency(link_args: [ '-ldxgi' ])
+  lib_d3d10core      = declare_dependency(link_args: [ '-ld3d10core' ])
   lib_d3dcompiler_43 = declare_dependency(link_args: [ '-L'+dxvk_library_path, '-ld3dcompiler_43' ])
   lib_d3dcompiler_47 = declare_dependency(link_args: [ '-ld3dcompiler' ])
   exe_ext = '.exe.so'
diff --git a/meson_options.txt b/meson_options.txt
index 6e0f05b..8fc8241 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,2 +1,3 @@
 option('enable_tests', type : 'boolean', value : false)
 option('enable_utils', type : 'boolean', value : false)
+option('whole_program', type : 'boolean', value : false)
diff --git a/src/d3d10/d3d10.spec b/src/d3d10/d3d10.spec
index efd145e..de62c17 100644
--- a/src/d3d10/d3d10.spec
+++ b/src/d3d10/d3d10.spec
@@ -4,10 +4,12 @@
 @ stdcall D3D10GetVertexShaderProfile(ptr)
 @ stdcall D3D10GetGeometryShaderProfile(ptr)
 @ stdcall D3D10GetPixelShaderProfile(ptr)
+@ stdcall D3D10GetShaderDebugInfo(ptr long ptr) d3dcompiler_43.D3DGetDebugInfo
 
-@ stdcall D3D10CreateBlob(long ptr)
-@ stdcall D3D10GetInputSignatureBlob(ptr long ptr)
-@ stdcall D3D10GetOutputSignatureBlob(ptr long ptr)
+@ stdcall D3D10CreateBlob(long ptr) d3dcompiler_43.D3DCreateBlob
+@ stdcall D3D10GetInputAndOutputSignatureBlob(ptr long ptr) d3dcompiler_43.D3DGetInputAndOutputSignatureBlob
+@ stdcall D3D10GetInputSignatureBlob(ptr long ptr) d3dcompiler_43.D3DGetInputSignatureBlob
+@ stdcall D3D10GetOutputSignatureBlob(ptr long ptr) d3dcompiler_43.D3DGetOutputSignatureBlob
 
 @ stdcall D3D10ReflectShader(ptr long ptr)
 @ stdcall D3D10CompileShader(ptr long str ptr ptr str str long ptr ptr)
diff --git a/src/d3d10/d3d10_1.spec b/src/d3d10/d3d10_1.spec
index bb183fd..5f890fe 100644
--- a/src/d3d10/d3d10_1.spec
+++ b/src/d3d10/d3d10_1.spec
@@ -1,21 +1,24 @@
 @ stdcall D3D10CreateDevice1(ptr long ptr long long long ptr)
 @ stdcall D3D10CreateDeviceAndSwapChain1(ptr long ptr long long long ptr ptr ptr)
 
-@ stdcall D3D10GetVertexShaderProfile(ptr)
-@ stdcall D3D10GetGeometryShaderProfile(ptr)
-@ stdcall D3D10GetPixelShaderProfile(ptr)
+@ stdcall D3D10GetVertexShaderProfile(ptr) d3d10.D3D10GetVertexShaderProfile
+@ stdcall D3D10GetGeometryShaderProfile(ptr) d3d10.D3D10GetGeometryShaderProfile
+@ stdcall D3D10GetPixelShaderProfile(ptr) d3d10.D3D10GetPixelShaderProfile
+@ stdcall D3D10GetShaderDebugInfo(ptr long ptr) d3d10.D3D10GetShaderDebugInfo
 
-@ stdcall D3D10CreateBlob(long ptr)
-@ stdcall D3D10GetInputSignatureBlob(ptr long ptr)
-@ stdcall D3D10GetOutputSignatureBlob(ptr long ptr)
+@ stdcall D3D10CreateBlob(long ptr) d3d10.D3D10CreateBlob
+@ stdcall D3D10GetInputSignatureBlob(ptr long ptr) d3d10.D3D10GetInputSignatureBlob
+@ stdcall D3D10GetOutputSignatureBlob(ptr long ptr) d3d10.D3D10GetOutputSignatureBlob
+@ stdcall D3D10GetInputAndOutputSignatureBlob(ptr long ptr) d3d10.D3D10GetInputAndOutputSignatureBlob
 
-@ stdcall D3D10ReflectShader(ptr long ptr)
-@ stdcall D3D10CompileShader(ptr long str ptr ptr str str long ptr ptr)
+@ stdcall D3D10ReflectShader(ptr long ptr) d3d10.D3D10ReflectShader
+@ stdcall D3D10CompileShader(ptr long str ptr ptr str str long ptr ptr) d3d10.D3D10CompileShader
 
-@ stdcall D3D10CreateEffectFromMemory(ptr long long ptr ptr ptr)
-@ stdcall D3D10CreateEffectPoolFromMemory(ptr long long ptr ptr)
-@ stdcall D3D10CompileEffectFromMemory(ptr long ptr ptr ptr long long ptr ptr)
+
+@ stdcall D3D10CreateEffectFromMemory(ptr long long ptr ptr ptr) d3d10.D3D10CreateEffectFromMemory
+@ stdcall D3D10CreateEffectPoolFromMemory(ptr long long ptr ptr) d3d10.D3D10CreateEffectPoolFromMemory
+@ stdcall D3D10CompileEffectFromMemory(ptr long ptr ptr ptr long long ptr ptr) d3d10.D3D10CompileEffectFromMemory
 
 @ stub D3D10DisassembleEffect
-@ stdcall D3D10DisassembleShader(ptr long long ptr ptr)
+@ stdcall D3D10DisassembleShader(ptr long long ptr ptr) d3d10.D3D10DisassembleShader
 @ stub D3D10PreprocessShader
diff --git a/src/d3d10/d3d10_main.cpp b/src/d3d10/d3d10_main.cpp
index c8ffe58..6685752 100644
--- a/src/d3d10/d3d10_main.cpp
+++ b/src/d3d10/d3d10_main.cpp
@@ -6,7 +6,15 @@
 #include "../dxgi/dxgi_adapter.h"
 #include "../dxgi/dxgi_device.h"
 
-static dxvk::Logger logger("d3d10.log");
+#ifdef USE_D3D10CORE
+static dxvk::Logger logger("d3d10core.log");
+#endif
+#ifdef USE_D3D10
+static dxvk::Logger logger("d3d10.log");
+#endif
+#ifdef USE_D3D10_1
+static dxvk::Logger logger("d3d10_1.log");
+#endif
 
 extern "C" {
   using namespace dxvk;
@@ -21,7 +27,7 @@ extern "C" {
           UINT                FeatureLevels,
           ID3D11Device**      ppDevice);
 
-
+#ifdef USE_D3D10CORE
   DLLEXPORT HRESULT __stdcall D3D10CoreCreateDevice(
           IDXGIFactory*           pFactory,
           IDXGIAdapter*           pAdapter,
@@ -51,9 +57,21 @@ extern "C" {
     
     return S_OK;
   }
+#else
+  HRESULT __stdcall D3D10CoreCreateDevice(
+          IDXGIFactory*           pFactory,
+          IDXGIAdapter*           pAdapter,
+          UINT                    Flags,
+          D3D_FEATURE_LEVEL       FeatureLevel,
+          ID3D10Device**          ppDevice);
+#endif
 
-
+#ifdef USE_D3D10_1
   DLLEXPORT HRESULT __stdcall D3D10CreateDevice1(
+#else
+  HRESULT __stdcall D3D10CreateDevice1(
+#endif
+
           IDXGIAdapter*           pAdapter,
           D3D10_DRIVER_TYPE       DriverType,
           HMODULE                 Software,
@@ -113,8 +131,11 @@ extern "C" {
     return hr;
   }
 
-
+#ifdef USE_D3D10
   DLLEXPORT HRESULT __stdcall D3D10CreateDevice(
+#else
+  HRESULT __stdcall D3D10CreateDevice(
+#endif
           IDXGIAdapter*           pAdapter,
           D3D10_DRIVER_TYPE       DriverType,
           HMODULE                 Software,
@@ -138,8 +159,11 @@ extern "C" {
     } return S_FALSE;
   }
 
-
+#ifdef USE_D3D10_1
   DLLEXPORT HRESULT __stdcall D3D10CreateDeviceAndSwapChain1(
+#else
+  HRESULT __stdcall D3D10CreateDeviceAndSwapChain1(
+#endif
           IDXGIAdapter*           pAdapter,
           D3D10_DRIVER_TYPE       DriverType,
           HMODULE                 Software,
@@ -196,8 +220,11 @@ extern "C" {
     } return S_FALSE;
   }
 
-
+#ifdef USE_D3D10
   DLLEXPORT HRESULT __stdcall D3D10CreateDeviceAndSwapChain(
+#else
+  HRESULT __stdcall D3D10CreateDeviceAndSwapChain(
+#endif
           IDXGIAdapter*           pAdapter,
           D3D10_DRIVER_TYPE       DriverType,
           HMODULE                 Software,
@@ -222,19 +249,18 @@ extern "C" {
       return S_OK;
     } return S_FALSE;
   }
+#ifdef USE_D3D10
+  DLLEXPORT const char* STDMETHODCALLTYPE D3D10GetVertexShaderProfile   (ID3D10Device*) { return "vs_4_1"; }
+  DLLEXPORT const char* STDMETHODCALLTYPE D3D10GetGeometryShaderProfile (ID3D10Device*) { return "gs_4_1"; }
+  DLLEXPORT const char* STDMETHODCALLTYPE D3D10GetPixelShaderProfile    (ID3D10Device*) { return "ps_4_1"; }
 
 
-  const char* STDMETHODCALLTYPE D3D10GetVertexShaderProfile   (ID3D10Device*) { return "vs_4_1"; }
-  const char* STDMETHODCALLTYPE D3D10GetGeometryShaderProfile (ID3D10Device*) { return "gs_4_1"; }
-  const char* STDMETHODCALLTYPE D3D10GetPixelShaderProfile    (ID3D10Device*) { return "ps_4_1"; }
-
-
-  HRESULT STDMETHODCALLTYPE D3D10CreateBlob(SIZE_T size, LPD3D10BLOB* ppBuffer) {
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10CreateBlob(SIZE_T size, LPD3D10BLOB* ppBuffer) {
     return D3DCreateBlob(size, ppBuffer);
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10GetInputSignatureBlob(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10GetInputSignatureBlob(
     const void*                     pShaderBytecode,
           SIZE_T                    BytecodeLength,
           ID3D10Blob**              ppSignatureBlob) {
@@ -245,7 +271,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10GetOutputSignatureBlob(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10GetOutputSignatureBlob(
     const void*                     pShaderBytecode,
           SIZE_T                    BytecodeLength,
           ID3D10Blob**              ppSignatureBlob) {
@@ -256,7 +282,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10ReflectShader(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10ReflectShader(
     const void*                     pShaderBytecode,
           SIZE_T                    BytecodeLength,
           ID3D10ShaderReflection**  ppReflector) {
@@ -281,7 +307,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10CompileShader(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10CompileShader(
           LPCSTR              pSrcData,
           SIZE_T              SrcDataSize,
           LPCSTR              pFileName,
@@ -298,7 +324,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10CreateEffectFromMemory(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10CreateEffectFromMemory(
           void*               pData,
           SIZE_T              DataSize,
           UINT                EffectFlags,
@@ -310,7 +336,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10CreateEffectPoolFromMemory(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10CreateEffectPoolFromMemory(
           void*               pData,
           SIZE_T              DataSize,
           UINT                EffectFlags,
@@ -321,7 +347,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10CompileEffectFromMemory(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10CompileEffectFromMemory(
           void*               pData,
           SIZE_T              DataLength,
           LPCSTR              pSrcFileName,
@@ -336,7 +362,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10DisassembleEffect(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10DisassembleEffect(
           ID3D10Effect*       pEffect,
           BOOL                EnableColorCode,
           ID3D10Blob**        ppDisassembly) {
@@ -345,7 +371,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10DisassembleShader(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10DisassembleShader(
     const void*               pShader,
           SIZE_T              BytecodeLength,
           BOOL                EnableColorCode,
@@ -357,7 +383,7 @@ extern "C" {
   }
 
 
-  HRESULT STDMETHODCALLTYPE D3D10PreprocessShader(
+  DLLEXPORT HRESULT STDMETHODCALLTYPE D3D10PreprocessShader(
           LPCSTR              pSrcData,
           SIZE_T              SrcDataSize,
           LPCSTR              pFileName,
@@ -372,7 +398,7 @@ extern "C" {
       ppShaderText,
       ppErrorMsgs);
   }
-
+#endif
 }
 
 
diff --git a/src/d3d10/meson.build b/src/d3d10/meson.build
index cf159f6..c3c5f22 100644
--- a/src/d3d10/meson.build
+++ b/src/d3d10/meson.build
@@ -6,31 +6,49 @@ d3d10_main_src = [
 d3d10_deps = [ lib_d3dcompiler_43, lib_dxgi ]
 d3d10_deps += meson.get_cross_property('winelib', false) ? lib_d3d11 : d3d11_dep
 
+d3d10core_args  = ['-DUSE_D3D10CORE']
+d3d10_args      = ['-DUSE_D3D10']
+d3d10_1_args    = ['-DUSE_D3D10_1']
+
+if get_option('whole_program')
+  d3d10_main_src = [
+    util_src,
+    spirv_src,
+    dxvk_src, glsl_generator.process(dxvk_shaders), dxvk_version,
+    dxbc_src,
+    d3d10_main_src
+  ]
+  d3d10_whole_inc = [dxvk_include_path, dxvk_inc]
+endif
+
 d3d10_core_dll = shared_library('d3d10core'+dll_ext, d3d10_main_src,
   name_prefix         : '',
-  dependencies        : [ d3d10_deps, dxbc_dep, dxvk_dep ],
-  include_directories : dxvk_include_path,
+  dependencies        : not get_option('whole_program') ? [ d3d10_deps, dxbc_dep, dxvk_dep ] : [ lib_dxgi, lib_d3d11 ],
+  include_directories : not get_option('whole_program') ? dxvk_include_path : d3d10_whole_inc,
   install             : true,
   objects             : not dxvk_msvc ? 'd3d10core'+def_spec_ext : [],
   vs_module_defs      : 'd3d10core'+def_spec_ext,
+  cpp_args            : [ d3d10core_args ],
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
 d3d10_dll = shared_library('d3d10'+dll_ext, d3d10_main_src,
   name_prefix         : '',
-  dependencies        : [ d3d10_deps, dxbc_dep, dxvk_dep ],
-  include_directories : dxvk_include_path,
+  dependencies        : not get_option('whole_program') ? [ d3d10_deps, dxbc_dep, dxvk_dep, lib_d3d10core ] : [  lib_dxgi, lib_d3d10core, lib_d3dcompiler_43 ],
+  include_directories : not get_option('whole_program') ? dxvk_include_path : d3d10_whole_inc,
   install             : true,
   objects             : not dxvk_msvc ? 'd3d10'+def_spec_ext : [],
   vs_module_defs      : 'd3d10'+def_spec_ext,
+  cpp_args            : [ d3d10_args ],
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
 d3d10_1_dll = shared_library('d3d10_1'+dll_ext, d3d10_main_src,
   name_prefix         : '',
-  dependencies        : [ d3d10_deps, dxbc_dep, dxvk_dep ],
-  include_directories : dxvk_include_path,
+  dependencies        : not get_option('whole_program') ? [ d3d10_deps, dxbc_dep, dxvk_dep, lib_d3d10core ] : [ lib_dxgi, lib_d3d10core ],
+  include_directories : not get_option('whole_program') ? dxvk_include_path : d3d10_whole_inc,
   install             : true,
   objects             : not dxvk_msvc ? 'd3d10_1'+def_spec_ext : [],
   vs_module_defs      : 'd3d10_1'+def_spec_ext,
+  cpp_args            : [ d3d10_1_args ],
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
 d3d10_dep = declare_dependency(
diff --git a/src/d3d11/meson.build b/src/d3d11/meson.build
index a8596b7..97a0acc 100644
--- a/src/d3d11/meson.build
+++ b/src/d3d11/meson.build
@@ -47,10 +47,21 @@ d3d11_src = [
   'd3d11_view_uav.cpp',
 ]
 
+if get_option('whole_program')
+  d3d11_src = [
+    util_src,
+    spirv_src,
+    dxvk_src, glsl_generator.process(dxvk_shaders), dxvk_version,
+    dxbc_src,
+    d3d11_src
+  ]
+  d3d11_whole_inc = [dxvk_include_path, dxvk_inc]
+endif
+
 d3d11_dll = shared_library('d3d11'+dll_ext, d3d11_src + d3d10_src,
   name_prefix         : '',
-  dependencies        : [ lib_dxgi, dxbc_dep, dxvk_dep ],
-  include_directories : dxvk_include_path,
+  dependencies        : not get_option('whole_program') ? [ lib_dxgi, dxbc_dep, dxvk_dep ] : [ thread_dep, lib_vulkan, lib_dxgi ],
+  include_directories : not get_option('whole_program') ? dxvk_include_path : d3d11_whole_inc,
   install             : true,
   objects             : not dxvk_msvc ? 'd3d11'+def_spec_ext : [],
   vs_module_defs      : 'd3d11'+def_spec_ext,
diff --git a/src/dxbc/meson.build b/src/dxbc/meson.build
index 63e2dea..7737c63 100644
--- a/src/dxbc/meson.build
+++ b/src/dxbc/meson.build
@@ -16,6 +16,7 @@ dxbc_src = files([
 
 dxbc_lib = static_library('dxbc', dxbc_src,
   include_directories : [ dxvk_include_path ],
+  build_by_default: not get_option('whole_program'),
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
 dxbc_dep = declare_dependency(
diff --git a/src/dxgi/meson.build b/src/dxgi/meson.build
index 87594d2..8acb58b 100644
--- a/src/dxgi/meson.build
+++ b/src/dxgi/meson.build
@@ -3,7 +3,7 @@ dxgi_shaders = files([
   'shaders/dxgi_presenter_vert.vert',
 ])
 
-dxgi_src = [
+dxgi_src = files([
   'dxgi_adapter.cpp',
   'dxgi_device.cpp',
   'dxgi_enums.cpp',
@@ -14,12 +14,22 @@ dxgi_src = [
   'dxgi_output.cpp',
   'dxgi_presenter.cpp',
   'dxgi_swapchain.cpp',
-]
+])
+
+if get_option('whole_program')
+  dxgi_src = [
+    util_src,
+    spirv_src,
+    dxvk_src, glsl_generator.process(dxvk_shaders), dxvk_version,
+    dxgi_src
+  ]
+  dxgi_whole_inc = [dxvk_include_path, dxvk_inc]
+endif
 
 dxgi_dll = shared_library('dxgi'+dll_ext, dxgi_src, glsl_generator.process(dxgi_shaders),
   name_prefix         : '',
-  dependencies        : [ dxvk_dep ],
-  include_directories : dxvk_include_path,
+  dependencies        : not get_option('whole_program') ? [ dxvk_dep ] : [ thread_dep, lib_vulkan ],
+  include_directories : not get_option('whole_program') ? dxvk_include_path : dxgi_whole_inc,
   install             : true,
   vs_module_defs      : 'dxgi'+def_spec_ext,
   objects             : not dxvk_msvc ? 'dxgi'+def_spec_ext : [],
diff --git a/src/dxvk/meson.build b/src/dxvk/meson.build
index 0dc911a..b6d7632 100644
--- a/src/dxvk/meson.build
+++ b/src/dxvk/meson.build
@@ -101,11 +101,14 @@ dxvk_src = files([
   'vulkan/dxvk_vulkan_names.cpp',
 ])
 
+dxvk_inc = include_directories('.')
+
 thread_dep = dependency('threads')
 
 dxvk_lib = static_library('dxvk', dxvk_src, glsl_generator.process(dxvk_shaders), dxvk_version,
   link_with           : [ util_lib, spirv_lib ],
   dependencies        : [ thread_dep, lib_vulkan ],
+  build_by_default: not get_option('whole_program'),
   include_directories : [ dxvk_include_path ],
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
diff --git a/src/spirv/meson.build b/src/spirv/meson.build
index 70e6ae7..c2a050f 100644
--- a/src/spirv/meson.build
+++ b/src/spirv/meson.build
@@ -5,4 +5,5 @@ spirv_src = files([
 
 spirv_lib = static_library('spirv', spirv_src,
   include_directories : [ dxvk_include_path ],
+  build_by_default: not get_option('whole_program'),
   override_options    : ['cpp_std='+dxvk_cpp_std])
diff --git a/src/util/meson.build b/src/util/meson.build
index 50583f2..e2f6c88 100644
--- a/src/util/meson.build
+++ b/src/util/meson.build
@@ -10,12 +10,13 @@ util_src = files([
   'log/log.cpp',
   'log/log_debug.cpp',
   
-  'sha1/sha1.c',
+  'sha1/sha1.cpp',
   'sha1/sha1_util.cpp',
 ])
 
 util_lib = static_library('util', util_src,
   include_directories : [ dxvk_include_path ],
+  build_by_default: not get_option('whole_program'),
   override_options    : ['cpp_std='+dxvk_cpp_std])
 
 util_dep = declare_dependency(
diff --git a/src/util/sha1/sha1.c b/src/util/sha1/sha1.cpp
similarity index 97%
rename from src/util/sha1/sha1.c
rename to src/util/sha1/sha1.cpp
index 39e6067..cc8f854 100644
--- a/src/util/sha1/sha1.c
+++ b/src/util/sha1/sha1.cpp
@@ -18,6 +18,11 @@
 #include <string.h>
 #include "sha1.h"
 
+#ifdef __cplusplus
+extern "C"
+{
+#endif // __cplusplus
+
 #define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
 
 /*
@@ -168,3 +173,7 @@ SHA1Final(uint8_t digest[SHA1_DIGEST_LENGTH], SHA1_CTX *context)
 	}
 	memset(context, 0, sizeof(*context));
 }
+
+#ifdef __cplusplus
+} // extern "C"
+#endif // __cplusplus
